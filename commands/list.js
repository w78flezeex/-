const Discord = require('discord.js');
const config = require('../config.json');

module.exports.run = async (client, message, args) => {
  const select = new Discord.SelectMenuBuilder().setCustomId("select").setPlaceholder("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–∑–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!").addOptions([
    {
      label: 'üéâ –û–±—ã—á–Ω—ã–µ —Ä–∞–∑–¥–∞—á–∏',
      description: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–±—ã—á–Ω—ã–µ —Ä–∞–∑–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω—ã –Ω–∞ –≤–∞—à–µ–º —Å–µ—Ä–≤–µ—Ä–µ!',
      value: 'normal',
    },
  ])
  const row = new Discord.ActionRowBuilder().addComponents([select])
  let giveaways = client.giveawaysManager.giveaways.filter(g => g.guildId === `${message.guild.id}` && !g.ended);
  if (!giveaways.some(e => e.messageId)) {
    return message.reply('üí• –†–∞–∑–¥–∞—á–∏ –Ω–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è')
  }
  const msg = await message.reply({ embeds: [new Discord.EmbedBuilder().setDescription("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É!").setColor("#2F3136").setTimestamp()], components: [row] })
  let embed = new Discord.EmbedBuilder()
    .setTitle("–ê–∫—Ç–∏–≤–Ω—ã–µ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–∞–∑–¥–∞—á–∏")
    .setColor("#2F3136")
    .setFooter({
      text: `${client.user.username}`, 
      iconURL: client.user.displayAvatarURL()
    })
    .setTimestamp()

  const filter = x => x.customId == "select" && x.user.id == message.author.id
  const collector = await message.channel.createMessageComponentCollector({ filter, time: 60000, max: 1 })
  collector.on("collect", async (i) => {
    i.update({ components: [] });
    const val = i.values[0]
    if (val == "normal") {
      await Promise.all(giveaways.map(async (x) => {
            embed.addFields({ name:
              `–û–±—ã—á–Ω–∞—è —Ä–∞–∑–¥–∞—á–∞ –ø–æ–¥–∞—Ä–∫–æ–≤:`, value: `**–ü—Ä–∏–∑:** **[${x.prize}](https://discord.com/channels/${x.guildId}/${x.channelId}/${x.messageId})\n–ù–∞—á–∞—Ç—ã–π:** <t:${((x.startAt)/1000).toFixed(0)}:R> (<t:${((x.startAt)/1000).toFixed(0)}:f>)\n**Ends:** <t:${((x.endAt)/1000).toFixed(0)}:R> (<t:${((x.endAt)/1000).toFixed(0)}:f>)`
              });
      }));
     msg.edit({ embeds: [embed] })
    }

  })
  collector.on("end",(collected, reason) => {
   if(reason == "time")
   msg.edit({ content: "üëÄ –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä —É–Ω–∏—á—Ç–æ–∂–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!", components: [] })
  })
}

